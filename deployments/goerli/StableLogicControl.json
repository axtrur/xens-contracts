{
  "address": "0x9634e677F3Eb0503aF7204d3468127470d27941d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessAddress",
          "type": "address"
        }
      ],
      "name": "accessible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "premium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "namelist",
          "type": "string[]"
        }
      ],
      "name": "removeReserveNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rentPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "reservenames",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "name": "setPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "namelist",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "addresslist",
          "type": "address[]"
        }
      ],
      "name": "setReserveNames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ac7681b9d129a0d258cfb1e7df789a61350e4dda6ded70d6824610d3adccdd2",
  "receipt": {
    "to": null,
    "from": "0x3C90c2CDf260FB7413F6248037EDEE24BfE5295e",
    "contractAddress": "0x9634e677F3Eb0503aF7204d3468127470d27941d",
    "transactionIndex": 18,
    "gasUsed": "1373637",
    "logsBloom": "0x
    "blockHash": "0xbd408afc91c19c36ff5e67dfd7b6973f6d739fad7b553b120d90a6785f14dca9",
    "transactionHash": "0x1ac7681b9d129a0d258cfb1e7df789a61350e4dda6ded70d6824610d3adccdd2",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 7981557,
        "transactionHash": "0x1ac7681b9d129a0d258cfb1e7df789a61350e4dda6ded70d6824610d3adccdd2",
        "address": "0x9634e677F3Eb0503aF7204d3468127470d27941d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c90c2cdf260fb7413f6248037edee24bfe5295e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbd408afc91c19c36ff5e67dfd7b6973f6d739fad7b553b120d90a6785f14dca9"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 7981557,
        "transactionHash": "0x1ac7681b9d129a0d258cfb1e7df789a61350e4dda6ded70d6824610d3adccdd2",
        "address": "0x9634e677F3Eb0503aF7204d3468127470d27941d",
        "topics": [
          "0x73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000005e80a6bf300000000000000000000000000000000000000000000000000000005e80a6bf300000000000000000000000000000000000000000000000000000005e80a6bf300000000000000000000000000000000000000000000000000000005e80a6bf300000000000000000000000000000000000000000000000000000003b1068378",
        "logIndex": 1,
        "blockHash": "0xbd408afc91c19c36ff5e67dfd7b6973f6d739fad7b553b120d90a6785f14dca9"
      }
    ],
    "blockNumber": 7981557,
    "cumulativeGasUsed": "2367997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      25367833587,
      25367833587,
      25367833587,
      25367833587,
      15854895992
    ]
  ],
  "solcInputHash": "902db3b48db8cf37b48a2125e6b3980f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessAddress\",\"type\":\"address\"}],\"name\":\"accessible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"namelist\",\"type\":\"string[]\"}],\"name\":\"removeReserveNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rentPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"reservenames\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"namelist\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addresslist\",\"type\":\"address[]\"}],\"name\":\"setReserveNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"premium(string,uint256,uint256)\":{\"details\":\"Returns the pricing premium in wei.\"},\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"The price of this renewal or registration, in wei.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPrices(uint256[])\":{\"details\":\"Sets rent prices.\",\"params\":{\"_rentPrices\":\"The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ethregistrar/StableLogicControl.sol\":\"StableLogicControl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ethregistrar/LogicControl.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface LogicControl {\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return The price of this renewal or registration, in wei.\\n     */\\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\\n    function accessible(string memory name, address owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfd609caa16e1082d560fbb9190975549cadae848c526e368ea01344f00774b1f\"},\"contracts/ethregistrar/SafeMath.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe0d6a6c8982dd734335683451a3914cbb49801203772b9fc1fd1efacae75d4ce\"},\"contracts/ethregistrar/StableLogicControl.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./LogicControl.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n// StableLogicControl sets a price in USD, based on an oracle.\\ncontract StableLogicControl is Ownable, LogicControl {\\n    using SafeMath for *;\\n    using StringUtils for *;\\n\\n    // Rent in base price (price by coin) units by length. Element 0 is for 1-length names, and so on.\\n    uint[] public rentPrices;\\n\\n    mapping(string => address) public reservenames;\\n\\n    mapping(address => bool) public controllers;\\n\\n    event OracleChanged(address oracle);\\n\\n    event RentPriceChanged(uint[] prices);\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ORACLE_ID = bytes4(keccak256(\\\"price(string,uint256,uint256)\\\") ^ keccak256(\\\"premium(string,uint256,uint256)\\\"));\\n\\n    constructor(uint[] memory _rentPrices) public {\\n        setPrices(_rentPrices);\\n    }\\n\\n    modifier authorised {\\n        require(\\n            msg.sender == owner() || controllers[msg.sender],\\n            \\\"Caller is not a controller or owner\\\"\\n        );\\n        _;\\n    }\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n    }\\n\\n    function setReserveNames(string[] memory namelist, address[] memory addresslist) public authorised {\\n        require(namelist.length == addresslist.length, \\\"array length invalid\\\");\\n        for (uint256 i = 0; i < namelist.length; i++) {\\n            reservenames[namelist[i]] = addresslist[i];\\n        }\\n    }\\n    function removeReserveNames(string[] memory namelist) public authorised {\\n        for (uint256 i = 0; i < namelist.length; i++) {\\n            delete reservenames[namelist[i]];\\n        }\\n    }\\n\\n    function accessible(string memory name, address accessAddress) public view override returns (bool) {\\n        if(accessAddress == address(this)) {\\n            return true;\\n        }\\n        if(accessAddress == owner()) {\\n            return true;\\n        }\\n        if(reservenames[name] !=  address(0) && accessAddress != reservenames[name]) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function price(string calldata name, uint expires, uint duration) external view override returns(uint) {\\n        uint len = name.strlen();\\n        if(len > rentPrices.length) {\\n            len = rentPrices.length;\\n        }\\n        require(len > 0);\\n        \\n        uint basePrice = rentPrices[len - 1].mul(duration);\\n        basePrice = basePrice.add(_premium(name, expires, duration));\\n\\n        return toStandardPrice(basePrice);\\n    }\\n\\n    /**\\n     * @dev Sets rent prices.\\n     * @param _rentPrices The price array. Each element corresponds to a specific\\n     *                    name length; names longer than the length of the array\\n     *                    default to the price of the last element. Values are\\n     *                    in base price units, equal to one attodollar (1e-18\\n     *                    dollar) each.\\n     */\\n    function setPrices(uint[] memory _rentPrices) public onlyOwner {\\n        rentPrices = _rentPrices;\\n        emit RentPriceChanged(_rentPrices);\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in wei.\\n     */\\n    function premium(string calldata name, uint expires, uint duration) external view returns(uint) {\\n        return toStandardPrice(_premium(name, expires, duration));\\n    }\\n\\n    /**\\n     * @dev Returns the pricing premium in internal base units.\\n     */\\n    function _premium(string memory name, uint expires, uint duration) virtual internal view returns(uint) {\\n        return 0;\\n    }\\n\\n    function toStandardPrice(uint amount) internal view returns(uint) {\\n        return amount ; // wei\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool) {\\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa80509f46e9213c0cdd07bfbcec58f3f45f431679b1eb3db1accb838389000a7\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint) {\\n        uint len;\\n        uint i = 0;\\n        uint bytelength = bytes(s).length;\\n        for(len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if(b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n\\n\\n    function substring(string memory s, uint startIndex, uint endIndex)  internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(s);\\n        bytes memory result = new bytes(endIndex-startIndex);\\n        for(uint i = startIndex; i < endIndex; i++) {\\n            result[i-startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n}\\n\",\"keccak256\":\"0x72ab4cc93c60312c52d2b0e95940df6cbb93d2048b83f44d46d4da1389570ac5\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620017e9380380620017e98339810160408190526200003491620001db565b6200003f3362000051565b6200004a81620000a1565b50620002ea565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000ab620000fd565b8051620000c09060019060208401906200015e565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df81604051620000f29190620002a4565b60405180910390a150565b6000546001600160a01b031633146200015c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b8280548282559060005260206000209081019282156200019c579160200282015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001ae565b5090565b5b80821115620001aa5760008155600101620001af565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620001ef57600080fd5b82516001600160401b03808211156200020757600080fd5b818501915085601f8301126200021c57600080fd5b815181811115620002315762000231620001c5565b8060051b604051601f19603f83011681018181108582111715620002595762000259620001c5565b6040529182528482019250838101850191888311156200027857600080fd5b938501935b8285101562000298578451845293850193928501926200027d565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620002de57835183529284019291840191600101620002c0565b50909695505050505050565b6114ef80620002fa6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379cf92d31161008c578063ab557a2011610066578063ab557a2014610225578063da8c229e14610238578063e0dba60f1461025b578063f2fde38b1461026e57600080fd5b806379cf92d3146101e15780638da5cb5b146101f4578063a34e35961461021257600080fd5b80635a42333a116100c85780635a42333a1461014b578063715018a61461015e578063717004da1461016857806374e2b30a1461017b57600080fd5b806301ffc9a7146100ef57806306d5d0b61461011757806350e9a71514610138575b600080fd5b6101026100fd366004610e16565b610281565b60405190151581526020015b60405180910390f35b61012a610125366004610e58565b61031a565b60405190815260200161010e565b61012a610146366004610e71565b61033b565b610102610159366004611025565b610435565b610166610559565b005b610166610176366004611127565b61056d565b6101bc610189366004611164565b805160208183018101805160028252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b6101666101ef366004611199565b6106b3565b60005473ffffffffffffffffffffffffffffffffffffffff166101bc565b61012a610220366004610e71565b610709565b61016661023336600461121f565b61075d565b6101026102463660046112e1565b60036020526000908152604090205460ff1681565b6101666102693660046112fc565b610943565b61016661027c3660046112e1565b6109a1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061031457507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a7928300000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061032a57600080fd5b600091825260209091200154905081565b60008061037d86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5892505050565b60015490915081111561038f57506001545b6000811161039c57600080fd5b60006103d78460016103ae8186611367565b815481106103be576103be61137a565b9060005260206000200154610c5f90919063ffffffff16565b905061042661041f88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150610c9b9050565b8290610ca4565b9050805b979650505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff83160361045c57506001610314565b60005473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104af57506001610314565b600073ffffffffffffffffffffffffffffffffffffffff166002846040516104d791906113a9565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614801590610543575060028360405161051691906113a9565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff838116911614155b1561055057506000610314565b50600192915050565b610561610cc0565b61056b6000610d41565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314806105a257503360009081526003602052604090205460ff165b610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f72206f7760448201527f6e6572000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b81518110156106af5760028282815181106106535761065361137a565b602002602001015160405161066891906113a9565b90815260405190819003602001902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055806106a7816113d8565b915050610636565b5050565b6106bb610cc0565b80516106ce906001906020840190610db6565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516106fe9190611410565b60405180910390a150565b600061075461075186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250879150610c9b9050565b90565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061079257503360009081526003602052604090205460ff165b61081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f72206f7760448201527f6e65720000000000000000000000000000000000000000000000000000000000606482015260840161062a565b8051825114610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6172726179206c656e67746820696e76616c6964000000000000000000000000604482015260640161062a565b60005b825181101561093e578181815181106108a7576108a761137a565b602002602001015160028483815181106108c3576108c361137a565b60200260200101516040516108d891906113a9565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff000000000000000000000000000000000000000090921691909117905580610936816113d8565b91505061088c565b505050565b61094b610cc0565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6109a9610cc0565b73ffffffffffffffffffffffffffffffffffffffff8116610a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161062a565b610a5581610d41565b50565b8051600090819081905b80821015610c56576000858381518110610a7e57610a7e61137a565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f8000000000000000000000000000000000000000000000000000000000000000811015610ae157610ada600184611454565b9250610c43565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610b3657610ada600284611454565b7ff0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610b8b57610ada600384611454565b7ff8000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610be057610ada600484611454565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610c3557610ada600584611454565b610c40600684611454565b92505b5082610c4e816113d8565b935050610a62565b50909392505050565b600082600003610c7157506000610314565b6000610c7d8385611467565b905082610c8a858361147e565b14610c9457600080fd5b9392505050565b60009392505050565b600080610cb18385611454565b905083811015610c9457600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff16331461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610df1579160200282015b82811115610df1578251825591602001919060010190610dd6565b50610dfd929150610e01565b5090565b5b80821115610dfd5760008155600101610e02565b600060208284031215610e2857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9457600080fd5b600060208284031215610e6a57600080fd5b5035919050565b60008060008060608587031215610e8757600080fd5b843567ffffffffffffffff80821115610e9f57600080fd5b818701915087601f830112610eb357600080fd5b813581811115610ec257600080fd5b886020828501011115610ed457600080fd5b6020928301999098509187013596604001359550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f6657610f66610ef0565b604052919050565b600082601f830112610f7f57600080fd5b813567ffffffffffffffff811115610f9957610f99610ef0565b610fca60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610f1f565b818152846020838601011115610fdf57600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461102057600080fd5b919050565b6000806040838503121561103857600080fd5b823567ffffffffffffffff81111561104f57600080fd5b61105b85828601610f6e565b92505061106a60208401610ffc565b90509250929050565b600067ffffffffffffffff82111561108d5761108d610ef0565b5060051b60200190565b600082601f8301126110a857600080fd5b813560206110bd6110b883611073565b610f1f565b82815260059290921b840181019181810190868411156110dc57600080fd5b8286015b8481101561111c57803567ffffffffffffffff8111156111005760008081fd5b61110e8986838b0101610f6e565b8452509183019183016110e0565b509695505050505050565b60006020828403121561113957600080fd5b813567ffffffffffffffff81111561115057600080fd5b61115c84828501611097565b949350505050565b60006020828403121561117657600080fd5b813567ffffffffffffffff81111561118d57600080fd5b61115c84828501610f6e565b600060208083850312156111ac57600080fd5b823567ffffffffffffffff8111156111c357600080fd5b8301601f810185136111d457600080fd5b80356111e26110b882611073565b81815260059190911b8201830190838101908783111561120157600080fd5b928401925b8284101561042a57833582529284019290840190611206565b6000806040838503121561123257600080fd5b823567ffffffffffffffff8082111561124a57600080fd5b61125686838701611097565b935060209150818501358181111561126d57600080fd5b85019050601f8101861361128057600080fd5b803561128e6110b882611073565b81815260059190911b820183019083810190888311156112ad57600080fd5b928401925b828410156112d2576112c384610ffc565b825292840192908401906112b2565b80955050505050509250929050565b6000602082840312156112f357600080fd5b610c9482610ffc565b6000806040838503121561130f57600080fd5b61131883610ffc565b91506020830135801515811461132d57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561031457610314611338565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b818110156113ca57602081860181015185830152016113b0565b506000920191825250919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361140957611409611338565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156114485783518352928401929184019160010161142c565b50909695505050505050565b8082018082111561031457610314611338565b808202811582820484141761031457610314611338565b6000826114b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212202a9f22f8519a564d8ba31d2f0d6d90a0901ab45f863e76e222418c03de7862a864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806379cf92d31161008c578063ab557a2011610066578063ab557a2014610225578063da8c229e14610238578063e0dba60f1461025b578063f2fde38b1461026e57600080fd5b806379cf92d3146101e15780638da5cb5b146101f4578063a34e35961461021257600080fd5b80635a42333a116100c85780635a42333a1461014b578063715018a61461015e578063717004da1461016857806374e2b30a1461017b57600080fd5b806301ffc9a7146100ef57806306d5d0b61461011757806350e9a71514610138575b600080fd5b6101026100fd366004610e16565b610281565b60405190151581526020015b60405180910390f35b61012a610125366004610e58565b61031a565b60405190815260200161010e565b61012a610146366004610e71565b61033b565b610102610159366004611025565b610435565b610166610559565b005b610166610176366004611127565b61056d565b6101bc610189366004611164565b805160208183018101805160028252928201919093012091525473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b6101666101ef366004611199565b6106b3565b60005473ffffffffffffffffffffffffffffffffffffffff166101bc565b61012a610220366004610e71565b610709565b61016661023336600461121f565b61075d565b6101026102463660046112e1565b60036020526000908152604090205460ff1681565b6101666102693660046112fc565b610943565b61016661027c3660046112e1565b6109a1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061031457507fffffffff0000000000000000000000000000000000000000000000000000000082167ff3a7928300000000000000000000000000000000000000000000000000000000145b92915050565b6001818154811061032a57600080fd5b600091825260209091200154905081565b60008061037d86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a5892505050565b60015490915081111561038f57506001545b6000811161039c57600080fd5b60006103d78460016103ae8186611367565b815481106103be576103be61137a565b9060005260206000200154610c5f90919063ffffffff16565b905061042661041f88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150610c9b9050565b8290610ca4565b9050805b979650505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff83160361045c57506001610314565b60005473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104af57506001610314565b600073ffffffffffffffffffffffffffffffffffffffff166002846040516104d791906113a9565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff1614801590610543575060028360405161051691906113a9565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff838116911614155b1561055057506000610314565b50600192915050565b610561610cc0565b61056b6000610d41565b565b60005473ffffffffffffffffffffffffffffffffffffffff163314806105a257503360009081526003602052604090205460ff165b610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f72206f7760448201527f6e6572000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b81518110156106af5760028282815181106106535761065361137a565b602002602001015160405161066891906113a9565b90815260405190819003602001902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055806106a7816113d8565b915050610636565b5050565b6106bb610cc0565b80516106ce906001906020840190610db6565b507f73422d94aedd596c2d4d39f27a01033adc390a9054efaf259afefd95ef7331df816040516106fe9190611410565b60405180910390a150565b600061075461075186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250879150610c9b9050565b90565b95945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633148061079257503360009081526003602052604090205460ff165b61081e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f43616c6c6572206973206e6f74206120636f6e74726f6c6c6572206f72206f7760448201527f6e65720000000000000000000000000000000000000000000000000000000000606482015260840161062a565b8051825114610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6172726179206c656e67746820696e76616c6964000000000000000000000000604482015260640161062a565b60005b825181101561093e578181815181106108a7576108a761137a565b602002602001015160028483815181106108c3576108c361137a565b60200260200101516040516108d891906113a9565b908152604051908190036020019020805473ffffffffffffffffffffffffffffffffffffffff929092167fffffffffffffffffffffffff000000000000000000000000000000000000000090921691909117905580610936816113d8565b91505061088c565b505050565b61094b610cc0565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6109a9610cc0565b73ffffffffffffffffffffffffffffffffffffffff8116610a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161062a565b610a5581610d41565b50565b8051600090819081905b80821015610c56576000858381518110610a7e57610a7e61137a565b01602001517fff000000000000000000000000000000000000000000000000000000000000001690507f8000000000000000000000000000000000000000000000000000000000000000811015610ae157610ada600184611454565b9250610c43565b7fe0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610b3657610ada600284611454565b7ff0000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610b8b57610ada600384611454565b7ff8000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610be057610ada600484611454565b7ffc000000000000000000000000000000000000000000000000000000000000007fff0000000000000000000000000000000000000000000000000000000000000082161015610c3557610ada600584611454565b610c40600684611454565b92505b5082610c4e816113d8565b935050610a62565b50909392505050565b600082600003610c7157506000610314565b6000610c7d8385611467565b905082610c8a858361147e565b14610c9457600080fd5b9392505050565b60009392505050565b600080610cb18385611454565b905083811015610c9457600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff16331461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161062a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610df1579160200282015b82811115610df1578251825591602001919060010190610dd6565b50610dfd929150610e01565b5090565b5b80821115610dfd5760008155600101610e02565b600060208284031215610e2857600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610c9457600080fd5b600060208284031215610e6a57600080fd5b5035919050565b60008060008060608587031215610e8757600080fd5b843567ffffffffffffffff80821115610e9f57600080fd5b818701915087601f830112610eb357600080fd5b813581811115610ec257600080fd5b886020828501011115610ed457600080fd5b6020928301999098509187013596604001359550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610f6657610f66610ef0565b604052919050565b600082601f830112610f7f57600080fd5b813567ffffffffffffffff811115610f9957610f99610ef0565b610fca60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610f1f565b818152846020838601011115610fdf57600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461102057600080fd5b919050565b6000806040838503121561103857600080fd5b823567ffffffffffffffff81111561104f57600080fd5b61105b85828601610f6e565b92505061106a60208401610ffc565b90509250929050565b600067ffffffffffffffff82111561108d5761108d610ef0565b5060051b60200190565b600082601f8301126110a857600080fd5b813560206110bd6110b883611073565b610f1f565b82815260059290921b840181019181810190868411156110dc57600080fd5b8286015b8481101561111c57803567ffffffffffffffff8111156111005760008081fd5b61110e8986838b0101610f6e565b8452509183019183016110e0565b509695505050505050565b60006020828403121561113957600080fd5b813567ffffffffffffffff81111561115057600080fd5b61115c84828501611097565b949350505050565b60006020828403121561117657600080fd5b813567ffffffffffffffff81111561118d57600080fd5b61115c84828501610f6e565b600060208083850312156111ac57600080fd5b823567ffffffffffffffff8111156111c357600080fd5b8301601f810185136111d457600080fd5b80356111e26110b882611073565b81815260059190911b8201830190838101908783111561120157600080fd5b928401925b8284101561042a57833582529284019290840190611206565b6000806040838503121561123257600080fd5b823567ffffffffffffffff8082111561124a57600080fd5b61125686838701611097565b935060209150818501358181111561126d57600080fd5b85019050601f8101861361128057600080fd5b803561128e6110b882611073565b81815260059190911b820183019083810190888311156112ad57600080fd5b928401925b828410156112d2576112c384610ffc565b825292840192908401906112b2565b80955050505050509250929050565b6000602082840312156112f357600080fd5b610c9482610ffc565b6000806040838503121561130f57600080fd5b61131883610ffc565b91506020830135801515811461132d57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561031457610314611338565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b818110156113ca57602081860181015185830152016113b0565b506000920191825250919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361140957611409611338565b5060010190565b6020808252825182820181905260009190848201906040850190845b818110156114485783518352928401929184019160010161142c565b50909695505050505050565b8082018082111561031457610314611338565b808202811582820484141761031457610314611338565b6000826114b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212202a9f22f8519a564d8ba31d2f0d6d90a0901ab45f863e76e222418c03de7862a864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "premium(string,uint256,uint256)": {
        "details": "Returns the pricing premium in wei."
      },
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "The price of this renewal or registration, in wei."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPrices(uint256[])": {
        "details": "Sets rent prices.",
        "params": {
          "_rentPrices": "The price array. Each element corresponds to a specific                    name length; names longer than the length of the array                    default to the price of the last element. Values are                    in base price units, equal to one attodollar (1e-18                    dollar) each."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 545,
        "contract": "contracts/ethregistrar/StableLogicControl.sol:StableLogicControl",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16512,
        "contract": "contracts/ethregistrar/StableLogicControl.sol:StableLogicControl",
        "label": "rentPrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16516,
        "contract": "contracts/ethregistrar/StableLogicControl.sol:StableLogicControl",
        "label": "reservenames",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 16520,
        "contract": "contracts/ethregistrar/StableLogicControl.sol:StableLogicControl",
        "label": "controllers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}